from Crypto.Cipher import AES
from Crypto.Util.number import inverse
from hashlib import sha1
import math
from tqdm.auto import tqdm
from collections import namedtuple
Point = namedtuple("Point", "x y") #from source.py

def point_addition(P, Q):
    Rx = (P.x*Q.x + D*P.y*Q.y) % p
    Ry = (P.x*Q.y + P.y*Q.x) % p
    return Point(Rx, Ry)

def scalar_multiplication(P, n):
    Q = Point(1, 0)
    while n > 0:
        if n % 2 == 1:
            Q = point_addition(Q, P)
        P = point_addition(P, P)
        n = n//2
    return Q
# Curve parameters - from source.py
p=173754216895752892448109692432341061254596347285717132408796456167143559
D = 529
G=Point(29394812077144852405795385333766317269085018265469771684226884125940148,     94108086667844986046802106544375316173742538919949485639896613738390948)


k_alice=Point(x=155781055760279718382374741001148850818103179141959728567110540865590463, y=73794785561346677848810778233901832813072697504335306937799336126503714)
k_bob=Point(x=171226959585314864221294077932510094779925634276949970785138593200069419, y=54353971839516652938533335476115503436865545966356461292708042305317630)
e_flag = {'iv': '64bc75c8b38017e1397c46f85d4e332b', 'encrypted_flag': '13e4d200708b786d8f7c3bd2dc5de0201f0d7879192e6603d7c5d6b963e1df2943e3ff75f7fda9c30a92171bbbc5acbf'}
chi_D = pow(D, (p-1)//2, p)
chi_D
sqrtD = int(math.sqrt(D)) #we are lucky as D=23**2 
sqrtD
point_iso = lambda P: (P.x - sqrtD*P.y) % p
G_iso = point_iso(G)
k_alice_iso = point_iso(k_alice)
k_bob_iso = point_iso(k_bob)
G_iso, k_alice_iso, k_bob_iso
#validate
na = 85659350935432836744105386596354218808820976897571304400328185351959247
scalar_multiplication(G, na) == k_alice
iv = bytes.fromhex(e_flag['iv'])
encrypted = bytes.fromhex(e_flag['encrypted_flag'])
shared_secret = scalar_multiplication(k_bob, na).x 
key = sha1(str(shared_secret).encode('ascii')).digest()[:16]
cipher = AES.new(key, AES.MODE_CBC, iv)
d = cipher.decrypt(encrypted)
d
